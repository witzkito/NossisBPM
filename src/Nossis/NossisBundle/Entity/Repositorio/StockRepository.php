<?php

namespace Nossis\NossisBundle\Entity\Repositorio;

use Doctrine\ORM\EntityRepository;

/**
 * StockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StockRepository extends EntityRepository
{
    
    public function findLast($limit=20)
    {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
            ->select('s')
            ->from('NossisBundle:Stock', 's')
            ->orderBy('s.id', 'DESC')
            ->setMaxResults($limit)
            ->getQuery();
        return $query->getResult();
        
    }
    
    public function mostrarStockActualLote()
    {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
            ->select('s.lote, count(s.id) as palets, sum(s.actual) as total, p.nombre')
            ->from('NossisBundle:Stock', 's')
            ->join('s.producto', 'p')
            ->where('s.actual > 0')
            ->GroupBy('s.lote, p.nombre')
            ->orderBy('s.lote, p.nombre')
            ->getQuery();
        return $query->getResult();
    }
    
    public function mostrarMovimientoProducto()
    {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
            ->select('p.nombre as producto, sum(s.ingresado) as ingresado, sum(rs.cantidad) as despachos,'
                    . 'sum(d.cantidad) as devoluciones, sum(b.cantidad) as bajas')
            ->from('NossisBundle:Stock', 's')
            ->leftjoin('s.producto', 'p')
            ->leftjoin('s.retiros', 'rs')
            ->leftjoin('rs.devoluciones', 'd')
            ->leftJoin('s.bajas', 'b')
            ->GroupBy('s.producto')
            ->getQuery();
        return $query->getResult();
    }
    
    public function mostrarMovimientoProductoFecha($desde, $hasta)
    {
        /*$em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
            ->select('p.nombre as producto, sum(s.ingresado) as ingresado, sum(rs.cantidad) as despachos,'
                    . 'sum(d.cantidad) as devoluciones, sum(b.cantidad) as bajas')
            ->from('NossisBundle:Stock', 's')
            ->leftjoin('s.producto', 'p')
            ->leftjoin('s.retiros', 'rs')
            ->leftjoin('rs.retiro', 'r', 'r.fechaSalida >= :desde AND r.fechaSalida <= :hasta')
            ->leftjoin('rs.devoluciones', 'd')
            ->leftJoin('s.bajas', 'b')
            ->andWhere('s.fechaIngreso >= :desde')
            ->andWhere('s.fechaIngreso <= :hasta')
            //->andWhere('r.fechaSalida >= :desde')
            //->andWhere('r.fechaSalida <= :hasta')
            //->orWhere('d.fecha >= :desde')
            //->andWhere('d.fecha <= :hasta')
            //->orWhere('b.fecha >= :desde')
            //->andWhere('b.fecha <= :hasta')    
            ->GroupBy('s.producto')
            ->setParameters(array('desde' => $desde, 'hasta' => $hasta))
            ->getQuery();
        return $query->getResult();*/
    }
    
    public function mostrarStockActualLoteFecha($desde, $hasta, $producto = null)
    {
        $em = $this->getEntityManager();
        if ($producto != null)
        {
        $query = $em->createQueryBuilder()
            ->select('s.lote, count(s.id) as palets, sum(s.actual) as total, p.nombre')
            ->from('NossisBundle:Stock', 's')
            ->join('s.producto', 'p')
            ->where('s.actual > 0')
            ->andWhere('s.fechaIngreso >= :desde')
            ->andWhere('s.fechaIngreso <= :hasta')
            ->andWhere('p.id = :producto')
            ->GroupBy('s.lote, p.nombre')
            ->orderBy('s.lote, p.nombre')
            ->setParameters(array('desde' => $desde, 'hasta' => $hasta, 'producto' => $producto))
            ->getQuery();
        }else{
            $query = $em->createQueryBuilder()
            ->select('s.lote, count(s.id) as palets, sum(s.actual) as total, p.nombre')
            ->from('NossisBundle:Stock', 's')
            ->join('s.producto', 'p')
            ->where('s.actual > 0')
            ->andWhere('s.fechaIngreso >= :desde')
            ->andWhere('s.fechaIngreso <= :hasta')
            ->GroupBy('s.lote, p.nombre')
            ->orderBy('s.lote, p.nombre')
            ->setParameters(array('desde' => $desde, 'hasta' => $hasta))
            ->getQuery();
        }
        return $query->getResult();
    }
    
    public function findAllFecha($desde, $hasta, $producto = null)
    {
        $em = $this->getEntityManager();
        if ($producto != null)
        {
            $query = $em->createQueryBuilder()
                ->select('s')
                ->from('NossisBundle:Stock', 's')
                ->where('s.actual > 0')
                ->andWhere('s.fechaIngreso >= :desde')
                ->andWhere('s.fechaIngreso <= :hasta')                    
                ->andWhere('s.producto = :producto')
                ->setParameters(array('desde' => $desde, 'hasta' => $hasta, 'producto' => $producto))
                ->getQuery();
        }else{
            $query = $em->createQueryBuilder()
                ->select('s')
                ->from('NossisBundle:Stock', 's')
                ->where('s.actual > 0')
                ->andWhere('s.fechaIngreso >= :desde')
                ->andWhere('s.fechaIngreso <= :hasta')
                ->setParameters(array('desde' => $desde, 'hasta' => $hasta))
                ->getQuery();
        }
        return $query->getResult();
    }
    
    public function getNumeroStock()
    {
        $año = new \DateTime('NOW');
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
            ->select('count(s.id)')
            ->from('NossisBundle:Stock', 's')
            ->where('s.numero LIKE :anio')
            ->setParameters(array('anio' => '%/'. $año->format('y')))
            ->getQuery();
        return $query->getResult();
    }
}
